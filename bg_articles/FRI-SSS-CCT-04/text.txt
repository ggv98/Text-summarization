 ВЪВЕДЕНИЕ Разнообразието от езици и варианти за разработка на приложения, били те уеб, десктоп или мобилни, е огромно. Един от най-трудните избори пред всеки млад програмист е именно избора на език, среда, библиотека за програмиране. Разбирайки, че съществуват буквално стотици  езици  за  програмиране,  програмистите  са  поставени  преди  трудната  задача  да разгледат всеки език и да вземат под внимание неговите предимства и недостатъци.  ИЗБОР НА ЕЗИК ЗА ПРОГРАМИРАНЕ Най-популярните езици Според  проучване  на  TIOBE  (freeCodeCamp,  2018)  5-те  най-популярни  езика  за програмиране за 2018г. са JAVA (14.215%), C (11,037%), C++ (5,603%), Python (4,678%) и C# (3,754%). Изхождайки от текущото проучване, както и проучвания на същата организация за предходни години, се забелязва тенденция в нарастването на нуждата от програмисти за езика JAVA.   JAVA като предпочитан език за програмиране Не  случайно  много  програмисти  избират  JAVA  за  тяхна  специализация.  Езикът  е известен със своята преносимост, давайки възможност за еднократно компилиране на кода и                                                  15 Докладът е представен на студентската научна сесия на 27 април 2018 г. в секция „Комуникационна и компютърна техника“ с оригинално заглавие на български език: РАЗРАБОТВАНЕ НА УЕБ УСЛУГИ С JAVA И SPRING FRAMEWORK   - 71 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. многократното му инсталиране и използване на всяка JAVA-поддържаща платформа, без да са необходими някакви модификации или допълнителни конфигурации. Тази му гъвкавост е сред основните предимства на езика, което го прави основен избор за много програмисти. Голямото разнообразие от поддържани външни библиотеки е друго предимство на езика, наред с функции като Garbage Collector и високата степен на защита. Езикът поддържа множество външни библиотеки, което го прави по-лесен за употреба. Много често програмистите се насочват към JAVA и избират библиотека, която да научат и използват.  SPRING FRAMEWORK SPRING Framework е външна библиотека, целяща да ускори процеса на проектиране и изпълнение на проекта. Лесната конфигурация в съчетание с множеството готови решения и заготовки я правят предпочитана.  Приложенията, написани на JAVA и SPRING библиотеката могат да бъдат практически от всякакво естество. С цел демонстрация е разработена Уеб базирана система за банкови преводи.  В случая употребата на библиотеката води до значително по-лесна и бърза конфигурация на базата от данни, както и много по-опростен и изчистен интерфейс на CRUD заявките. Това от своя страна води до по-ефективна обработка на заявките и отговорите между отделните системи, към която беше свързано текущо описаното приложение.  Може  би  най-голямото  предимство  на  приложението,  разработено  на  JAVA,  е възможността да успее да си комуникира с други приложения, без значение под каква среда са  разработени  те.  Поддържа  HTML,  SQL,  XML  и  други  унифицирани  компоненти  за предаване на данни, с което правят библиотеката и езика много по-гъвкави и ефективни спрямо други езици за програмиране.  РЕАЗЛИЗАЦИЯ  НА  УЕБ  УСЛУГИ  НА  JAVA  С  ПОМОЩТА  НА  SPRING FRAMEWORK  Създаване на проект Създаването на Spring проект става с няколко стъпки от https://start.spring.io/ или с плъгин в средата за разработване. По-сложно е, ако се започне като обикновен Maven проект. Maven е Java инструмент за улесняване процеса на построяване на проект, осигурява унифицирана система за построяване, осигурява качествена информация за проекта. При създаването на проекта се добавят нужните библиотеки, като не пречи да се добавят и в последствие. Такива са библиотеките за работа с бази от данни, уеб услуги, JPA, сървъри и т.н. С добавяне на библиотеките spring-boot-starter-data-jpa, spring-boot-starter-web, mysql-connector-java, spring-webmvc и spring-data-jpa разполагаме с готов вграден сървър и напълно готово приложение, използващо MySQL. Новото приложение има един основен клас, който е с анотация @SpringBootApplication. Анотацията е метадата, която може да бъде добавена към кода. Класовве, методи, променливи, параметри и пакети могат да бъдат анотирани. Те могат да бъдат вградени и да четат от файловете на класовете генерирани от компилатора.   Свързване на базата от данни с приложението Spring Data JPA осигурява поддръжка за Java Persistence API (JPA). Това е най-лесният начин за разработване на приложение, нуждаещо се от JPA. В конфигурационния файл application.properties за конфигуриране на типа на базата и данните за вход, се използват следните натройки:   spring.datasource.url  =  <път  до  схемата  на  базата  от  данни> (jdbc:mysql://localhost:3306/mibank?useSSL=false)   - 72 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. spring.datasource.username = <посочва се потребителско име за достъп до СУБД> spring.datasource.password = <посочва се парола за достъп до СУБД> spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect  Използване на базата от данни Анотация @Entity прави връзка между класа и таблица.  Анотацията @Repository отбелязва, че класа е “Repository”, оригинално дефинирано като Domain-Driven  Design  -  механизъм  за  капсулиращо  съхранение,  коригиране  и  търсене, симулиращо колекция от обекти. JpaRepository интерфейса добавя основни CRUD операции на репозиторито за специфичен тип.  Например  AccountRepository  е  референция  към  класа  Account,  който  има  анотация @Entity, така това репозитори ясно принадлежи на Spring Data JPA. @Entity @Data public class Account {} @Repository public interface AccountRepository extends JpaRepository<Account, String> {}  Бизнес логика Анотацията @Service отбелязва класа като услуга, дефиницията, за която е следната: „операция, предлагана като интерфейс, която стои сама в модела, без капсулирано състояние.“  @Service public class AccountService  Интерпретиране на заявките Анотацията  @RestController,  която  вътрешно  е  анотирана  с  @Controller  и @ResponseBody, интерпретира заявките. Типове, които имат тази анотация са третирани като контролери, където @RequestMapping методите предполагат @ResponseBody семантика по подразбиране. @RestController public class AccountController {         @GetMapping("/api/accounts/{iban}")  public  AccountExistDTO  exist(@PathVariable String iban) {…}         @PostMapping("/api/payments")  public  PaymentStatusDTO  transferMonery( @RequestBody PaymentDTO body) {…} } Анотациите  @GetMapping  и  @PostMapping  са  анотирани  сами  по  себе  си  със @RequestMapping.  Те  осигуряват  връзка  между  уеб  заявките  на  методи  в  класовете  за управление на заявките. За основен параметър приемат URL, с който се свързва метода. В пътя им могат да се слагат променливи, в които името на променливата се загражда в скоби {}. За да се ползва в метода, е нужно да се подаде параметър, еднакъв с името на променливата. За да работи параметъра, е нужна @PathVariable анотацията. При POST заявките, където имаме тяло,  свързването  става  благодарение  на  @RequestBody  анотацията  със  зададения  тип. Връщаният  резултат  на  тези  методи  се  връзва  с  отговора  на  заявката  благодарение  на @ResponseBody анотацията.  Достъп от други домейни Когато заявките ще се изпълняват от домейн различен от оригиналния се налага добавяне на @CrossOrigin анотацията, която като параметър „origins“ приема масив от домейни, а означението „*“ означава всички домейни. Може да се поставя на класове и методи. @RestController @CrossOrigin(origins = "*") public class AccountController {…}  Основните класове и методи, използвани за обработката на данните @Entity @Data public class Account - съдържа атрибути на сметката. Обвързва се с атрибути от базата от данни.   - 73 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. @RestController @CrossOrigin(origins = "*") public class AccountController – MVC  @GetMapping("/api/accounts/{iban}") public AccountExistDTO exist(@PathVariable String iban) – проверка дали съществува дадена сметка. @GetMapping("/api/accounts") public List<AccountDTO> getAll() – извличане на списък с всички сметки @Data public class AccountDTO – data transfer object – структура на сметката @Data public class AccountExistDTO – проверка за съществуване на сметка @Repository public interface AccountRepository extends JpaRepository<Account, String> - интерфес, осигуряващ CRUD на таблицата Account public List<Account> findByClient(Client client); - абстрактен метод за търсене по клиент в таблицата Account @Service public class AccountService – използва се за бизнес логиката между контролера и другите компоненти public  AccountExistDTO  findIban(String  iban)  –  метод,  връщащ  съществуването  или отсъствието на сметка public List<AccountDTO> findAll() – метод, връщащ всички сметки private AccountDTO convertToDTO(Account acc) – вътрешен метод за конвертиране на типовете @Entity @Data public class Client – осигурява връзката обект клиент с таблицата @Repository  public  interface  ClientRepository  extends  JpaRepository<Client,  Long> интерфес, осигуряващ CRUD @Service public class ClientService – използва се за бизнес логиката между контролера и другите компоненти @Data public class CentralBankDTO – очаквания обект, върнат от централната банка @Entity @Data public class Payment – осигурява връзката обект плащане с таблицата @Data public class PaymentDTO – структура за връщане на извършени плащания @Data public class PaymentStatusDTO – структура на връщания резултат при грешка @RestController @CrossOrigin(origins = "*") public class PaymentsController – контролер за плащанията @GetMapping("/api/payments")  public  List<PaymentDTO>  getAllPayments()  –  метод, връщащ всички плащания @GetMapping("/api/payments/{param}")  public  List<PaymentDTO> getFilteredPayments(@PathVariable String param) – метод, връщащ плащанията по IBAN или клиентски номер @PostMapping("/api/payments") public PaymentStatusDTO transferMonery(@RequestBody PaymentDTO body) – метод, приемащ форма за плащане и извършване на транзакции @Repository public interface PaymentsRepository extends JpaRepository<Payment, Long> - интерфес, осигуряващ CRUD List<Payment> findByIbanResOrIbanSnd(String param1, String param2) – абстрактен метод, търсещ по IBAN на получател или изпращач List<Payment> findByIbanResInOrIbanSndIn(List<String> param1, List<String> param2) – абстрактен метод, търсещ по списък от IBAN на получател или изпращач @Service public class PaymentsService – използва се за бизнес логиката между контролера и другите компоненти public List<PaymentDTO> getAll() – метод, връщащ всички плащания private PaymentDTO paymentsToDto(Payment payment) – конвертира обекта за плащане до съответния му връщане public List<PaymentDTO> getFilteredPayments(String param) – филтриране по IBAN или клиентски номер public PaymentStatusDTO transfer(PaymentDTO body) – обработва заявката за плащане, валидиране private  void  transferMoney(Account  res,  Account  snd,  PaymentDTO  body)  –  извършва плащането.   - 74 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  ИЗВОДИ Изграждането на приложение на Spring е лесно дори за хора, които за първи път се сблъскват  с  REST.  Има голям набор от  библиотеки, които  благодарение на  Spring Boot автоматично се конфигурират за съответната версия, когато е възможно с цел съвместимост на отделните зависимости. При нужда от допълнително конфигуриране, нещата не винаги стоят толкова прости, но това е в много крайни случаи.  БЛАГОДАРНОСТИ Този  доклад  се  публикува  със  съдействието  на  проект  2018-EEA-01  „Методи  за събиране, организация, достъп, обработка и анализ на големи обеми от структурирани и неструктурирани  данни“,  финансиран  от  фонд  „Научни  изследвания“  на  Русенски университет „Ангел Кънчев“.  