 ВЪВЕДЕНИЕ Golang e нов програмен език, който все по-често се използва за създаване на REST (REpresentational State Transfer) услуги. Основното му предимство пред останалите езици в тази област е стриктността от гледна точка на получаваните данни, което от своя страна намалява възможността за хакерски атаки. REST е архитектурен шаблон/стил, който дефинира набор от правила за комуникация между уеб услуги, базирана на HTTP протокола. Основната идея на REST е, че всеки обект или порция информация се третира като уникален ресурс, който може да бъде адресиран с уникален URI. Каква операция ще се извършва с посочения ресурс зависи от използвания HTTP метод. Уеб услугите, които съответстват на REST, наричат се още RESTful услуги, осигуряват оперативна съвместимост между различните (хетерогенни) компютърни системи в Интернет. Обикновено данните, които се обменят между клиента и сървъра при RESTful услугите се кодират във вид на JSON (JavaScript Object Notation) съобщения. JSON е текстово базиран отворен стандарт създаден за човешки четим обмен на данни. Състои се от прости структури от данни и асоциативни масиви, наречени обекти. Този доклад има за цел да опише основните моменти при създаването на едно REST приложение с помощта на езика Golang. За демонстрация е избрано опростено приложение за извършване на междубанкови преводи, което дава възможност за проверка на данните за банкови сметки и осъществени транзакции, както и за извършване на вътрешнобанкови и междубанкови плащания. Валидацията на данните за сметките от други банки се осъществява от централен възел, наречен централна банка.                                                  26 Докладът е представен на студентската научна сесия на 27 април 2018 г. в секция „Комуникационна и компютърна техника“ с оригинално заглавие на български език: REST УСЛУГИ НА GOLANG.   - 133 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Основни модули В езика за програмиране Golang една програма може да вижда и да достъпва всички методи и структури, разписани във файлове, намиращи се в директорията на проекта. За по-ясно разграничаване на функционалността, различните методи могат да се обособят в три модула (файла): стартиращ, маршрутизиращ и структурен. Първият модул (фиг. 14) извиква инициализиращите методи. С тяхна помощ се задава необходимата  информация  за  комуникация  с  базата  от  данни  (местоположение,  име, потребителско име и парола), порт, на който слуша приложението, и адрес на другата REST услуга, към която се обръща. Golang приложенията се стартират винаги от main метода на go файловете,  имащи  същото  име  като  папката,  в  която  се  намират.  Поради  тази  причина стартиращия модул трябва има същото име като REST приложението.   Фиг. 14. Сорс код на стартиращия модул  Маршрутизиращият  модул  дефинира  основните  REST  методи  и  осъществява прочитането и валидирането на постъпилите данни, препращането им към конкретни методи, които да вземат или актуализират определена информация в базата данни или друго REST приложение, както и връщането на подходящ отговор в зависимост от възникналите грешки при обработка на данните и от получените резултати. За целта се създава специална структура, която дефинира основните обекти в приложението (фиг. 15) – рутер на REST командите, обект за комуникация с базата от данни и URI на централната банка.   Фиг. 15. Дефиниране на основните обекти в приложението  Последният модул е структурният. В него се задава JSON структурата на обработваните заявки и връщаните отговори, шаблона на данните, подаван към базата от данни или вземан от нея, и структурата на подаваните и получаваните данни от други REST услуги (примерна структура  е  посочена  на  фиг.  16).  Освен  това  в  този  модул  са  разписани  и  методите, осъществяващи достъп до базата от данни и REST услугата на Централната банка. При по-сложна структура или приложение с по-голяма функционалност  този модул може да  се раздели  на  три:  описващ  структурата  на  обменяните  данни,  дефиниращ  методите  за комуникация с базата от данни и съдържащ методите за комуникация с други приложения.    - 134 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Фиг. 16. Примерна структура, използвана при комуникация с базата данни и описваща съответстващия JSON обект. В случая това е структура, описваща една транзакция.  Дефиниране на REST методите За  дефиниране  на  REST  методите  се  използва  обекта  mux.Router  от “github.com/gorilla/mux” библиотеката. За създаването  на нов рутиращ обект  се използва командата mux.NewRouter() (фиг. 17). С негова помощ се осъществява маршрутизацията. Задаването на URL на REST командата, заедно с изпълняващата го go функция, става с помощта на HandleFunc() метода на посочения по-горе обект. С Methods() се посочва HTTP метода на подаваната заявка.   Фиг. 17. Създаване на марштуризиращ обект и дефиниране на REST методите  Всеки от go методите, към който се препраща REST рутиращия обект (например фиг. 18), включва два аргумента: r от тип *http.Request (съдържащ данните на подаваната заявка) и w от тип http.ResponseWriter (в него се записва отговора).   Фиг. 18. Примерен метод изпълняващ REST команда. В случая се връщат всички транзакции по зададен критерий на търсене  С помощта на обекта vars (фиг. 19) от тип map[string]string, създаден чрез функцията mux.Vars(r), се прочитат параметрите на заявката, подадени в URL адреса на командата. За декодиране на параметрите подадени в тялото на заявката се използва декодер.    - 135 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Фиг. 19. Примерна употреба на декодер на тялото на REST заявката. В случая се прочитат всички данни за една транзакция – бенефициент, наредител, сума и основание  За връщане на грешките и резултатите от обработката в подходящ HTTP формат се използват методите RespondWithError и RespondWithJSON (фиг. 20). Първият кодира грешката по подходящ начин, а вторият кодира всички резултати в JSON формат.   Фиг. 20. Методи за обработка на резултатите и кодирането им в JSON формат  Връзка с базата от данни За  комуникация  с  базата  от  данни  се  използва  *sql.DB  обекта  от  библиотеката “github.com/go-sql-driver/mysql”. Връзката с базата от данни се осъществява на два етапа. При първия етап се инициализира (фиг. 21) с помощта на подадените от стартиращия модул данни – потребителско име, парола и име на базата от данни. Ако базата от данни не е локална, името трябва да включва и пътя до нея (IP адрес). При този етап се отваря и връзката между базата от данни и приложението.   Фиг. 21. Инициализация на базата от данни  Вторият етап се състои в подаването на конкретната заявка и обработването на данните ѝ (фиг. 22). Заявката се записва в обект от тип string и се подава в метод Query (при искане на   - 136 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. данни) или в метод Exec (при добавяне, актуализиране или изтриване на данни). Отговорът на заявката се запазва в обект от тип *Rows и се обраотва с помощта на методите Next и Scan.   Фиг. 22. Примерна заявка към базата от данни. В случая се взимат всички данни за осъществените транзакции.  Връзка с друго REST приложение За връзка с друго REST приложение първо трябва да се създаде HTTP клиент, на който да се зададе максимално време за изчакване на отговор (timeout) (фиг. 23).   Фиг. 23. Създаване на HTTP клиент  След това трябва да се сглоби URI адресът на REST командата. Той съдържа IP адреса на  достъпваната  REST  услуга  и  крайната  точка  (endpoint)  на  метода  (фиг.  24).  Накрая командата се подава с помощта на методите Get или Post на HTTP клиента. За подаване на друг тип HTTP заявка може да се използва метода Do, на който се подава обект от тип *Request като  параметър.  Трите  метода  връщат  като  резултат  обект  от  тип  *Response  (съдържащ отговора  на  заявката)  и  обект  от  тип  error  (съдържащ  съобщението  за  грешка,  ако  е възникнала) (фиг. 24).   Фиг. 24. Подаване на HTTP REST заявка за проверка за валидността на банкова сметка и преглед на върнатия резултат за грешки    - 137 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. Прочитането  на  отговора  се  осъществява  на  три  стъпки  (фиг.  25):  прочитане  на съдържанието от суровия HTTP отговор в string, създаване на обект от тип *Reader и създаване и прочитане на JSON обекта с помощта на *Decoder.   Фиг. 25. Прочитане на отговора, получен от друго REST приложение  ЗАКЛЮЧЕНИЕ Основното предимство на този тип приложения е стриктното валидиране на входните данни, осъществявано още на ниво примитиви на програмния език. Това спестява време при писането на програмния код и намалява вероятността от хакерски атаки. Друго важно предимство е това, че езикът е с отворен код. Това означава, че много бързо се отстраняват грешките в кода на методите на използваните библиотеки. Основен недостатък е липсата на утвърдени учебници или курсове за начинаещи. Заедно с  наличността  на  библиотеки  със  сходни  функционалности  (четене  на  JSON  структури, комуникация с база от данни) тази липса води до затруднения при първоначално писане на програмен  код.  Различните  особености  на  отделните  библиотеки водят  до  наличието  на множество примери, които често не са еквивалентни. Това от своя страна означава, че не всеки пример за търсената функционалност може да бъде реализиран с определена библиотека. Тази особеност  също  внася  забавяне  в  писането  на  програмната  логика.  Поради  това  при първоначален допир до езика се препоръчва да се потърси помощ от програмист вече запознат с него. За тази цел могат да се използват уеб платформите stackoverflow.com, github.com и golang.org.  БЛАГОДАРНОСТИ Този доклад се публикува със съдействието на проект 2018-EEA-01 „Методи за събиране, организация,  достъп,  обработка  и  анализ  на  големи  обеми  от  структурирани  и неструктурирани  данни“,  финансиран  от  фонд  „Научни  изследвания“  на  Русенски университет „Ангел Кънчев“.  