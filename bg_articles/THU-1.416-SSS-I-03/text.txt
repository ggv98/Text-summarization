 ВЪВЕДЕНИЕ Статията има за цел да опише етапите на изграждане на типична графична библиотека подобна на добре познатите библиотеки като Ogre3D, Irrlicht, Horde3D, Unity, Unreal и др., както и да обобщи по важните й характеристики. Идеята за създаване на такава библиотека се корени в няколко причини, част от които са потенциалното придобиване на по-детайлни познания в сферата на компютърната графика и създаване на нетипична, гъвкава библиотека, която решава някои от основните проблеми съществуващи в горе споменатите съществуващи към днешен ден решения.  Произход  и  предназначение  на  графичните  библиотеки  –  терминът  графична библиотека (на английски –  graphics engine) е често срещана част от една по-голяма единица позната в света на тримерната графика като „game engine” се заражда още в средата на 90-те години на миналия век във връзка с една от най-известните игри от т.нар. „first person shooter“ жанр, наречена „Doom“. Това е една от първите по-популярни игри, познати на пазара, при която ясно се изгражда видима граница или разделение между основното ядро и компонентите на графичната библиотека. Значението на това разделение бързо станало очевидно, когато разработчици  започнали  да  използват  отново  съществуващи  графични  библиотеки  без никакви или с минимални промени заедно с други компоненти за създаване на напълно нови и различни виртуални игри и графични приложения. Това дало и началото на т.нар. “mod” студия, които създавали нови игри, използвайки и преправяйки съществуващи вече такива.                                                  12 Докладът е представен на студентската научна сесия на 03. 05. 2018 г. в секция „Информатика“ с оригинално заглавие на български език: ПОДХОД ПРИ РАЗРАБОТВАНЕ НА ГРАФИЧНА БИБЛИОТЕКА С ИЗПОЛЗВАНЕ НА OPENGL   - 78 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 6.5. Игри като Quake III Arena & Unreal са типичен пример за виртуални игри създадени с идеята да бъдат лесно променяни и гъвкави, използвайки скриптови езици, които да управляват вътрешната логика на играта, без да има нужда да се променят компонентите, които стоят в основата (част от които е и  графичната библиотека) за създаването им.   Структура на графичните библиотеки – в основата си една графична библиотека се състои от няколко основни компонента или слоеве на абстракция, които работят заедно, за да постигнат ефективно, реалистично и оптимално крайната цел – изобразяване на компютърно генерирани изображения.   -  Първи слой – най-ниското ниво на абстракция в една графична библиотека, това е нивото,  което  комуникира  и  работи  директно  с  хардуера  или  със  съществуващи Graphics API като  OpenGL, DirectX, Vulkan, които се грижат  за комуникацията с графичния драйвер.   -  Втори слой – междинно ниво, което обвива първия слой на абстракция и служи за премахване  или  скриване  на  специфични  ограничения  и  характеристики, съществуващи в използвания API, драйвър или слой от предходното ниво. Това ниво дава  възможност  библиотеката  да  стане  независима  от  вида,    характеристиките, ограниченията или особеностите на използвания графичен конвейер и хардуер. В това ниво се изграждат основните функционалности, стоящи в основата на графичната библиотека като създаване, изтриване, копиране на видео буфери, текстури, шейдъри (на английски – shaders), графични контексти, интерфейс буфери, графични слоеве, хардуерни заявки и др.    -  Трети слой – това ниво се характеризира с висока абстракция, в него обикновено са включени функционалности, с които работи крайният потребител или клиент на една графична библиотека. Най-често този слой се характеризира с това, че съдържа много по-голям брой функционалности спрямо слоевете от по-ниско ниво. В този слой се съдържат  елементи  за  визуализация  и  импортиране  на  обекти,  осветяване,  сенки, текстуриране, тримерно селектиране, сериализация, симулация на частици, симулация на  течности,  премахване  на  невидими  обекти,  прозрачност,  смяна  на  проекции, прилагане на филтри, управление на входа и изхода и др.  СЪЩЕСТВУВАЩИ РЕШЕНИЯ  Към днешен ден съществуват голям набор от графични библиотеки. Практически те се разделят на две основни категории. От една страна съществуват библиотеки, които са доста гъвкави  и  тяхното  предимство  е,  че  те  предоставят  само  основните  базови  графични функционалности, които могат да бъдат лесно разширявани и персонализирани във всяка една посока. Голям недостатък при този вид библиотеки е, че изискват голям набор от познания, за да бъдат използвани или изменяни. Друг недостатък е количеството време, което се изисква, за да се изгради минимален, функциониращ проект. Такива библиотеки често изискват от потребителите да имат дълбоки програмни познания, те не предлагат лесен и удобен начин за взаимодействие, като напр. графичен интерфейс, често не включват допълнителни системи като аудио система или система за физична симулация. Няколко примера за такива библиотеки са:  -  Ogre3D – е базова графична библиотека, която осигурява основните елементи нужни за работата на графичния конвейер. Ogre3D предлага различни методи за визуализация и управление на сцени включващи пространствено разделяне, странициране, портали.   - 79 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 6.5. Друга характерна особеност е и възможността за работа с динамично ниво на детайл, анимации, работа с шейдъри на различни езици (GLSL, HLSL, Assembly, Cg)  -  Cocos2d  –  е  библиотека  с  отворен  достъп,  която  предлага  функционалности  за моделиране, визуализиране и симулиране на двумерни графични среди. Известна е с това, че е една от библиотеки с минимален набор функции, но и една от най-бързите към днешна дата. Дава възможност за създаване на проекти за всякакви устройства, както  мобилни  така  и  десктоп.  Бързината  ѝ  дава  възможност  да  се  разработват приложения за устройства с по-слаб хардуер спрямо съвременните стандарти.  -  Irrlicht  -  е  библиотека  с  отворен  достъп  предлагаща  най-голям  набор  от функционалности  спрямо  Ogre3D  или  Cocos2d.  Характеризира  се  с  това,  че  е сравнително малка, което дава възможност за лесно и бързо овладяване, поддържана е от голяма общност и е свободна за голям набор от програмни езици като C++, Java, Lua, Pascal, Basic, Python и др. Irrlicht поддържа OpenGL, DirectX 8, 9, and 11, както и шейдъри за различни езици (GLSL, HLSL). В сравнение със своите съперници тя предлага не само набор от графични функционалности, но и възможност за четене, запис и възпроизвеждане на голям набор от аудио, видео формати. Irrlicht предлага включена в себе си библиотека за физична симулация.  В другия край на спектъра съществуват библиотеки, които включват огромен набор от функционалности, даващ възможност за бърза разработка на проекти във всякакъв мащаб. Предимството  при  тях  е,  че  се  изискват  значително  по-малко  познания  в  сферата  на компютърната графика, с тях обикновено потребителят взаимодейства чрез потребителски графичен интерфейс, често не изискват пряко познание в сферата на програмирането. Друго характерно  предимство  е,  че  те  често  включват  не  само  набор  от  методи  за  графична визуализация, но и други елементи като аудио система или система за физична симулация. Недостатък е, че не могат да бъдат лесно персонализирани или изменяни за работа изискваща специфични нужди или техники.   -  Unreal Engine – една от най-успешните и най-известните библиотеки на разработчиците от Epic Games, влязла в книгата на рекордите на Гинес. Предназначена е за разработка на големи проекти. Характерно за Unreal Engine е, че се поддържа от множество платформи като Windows, Mac, Linux, iOS, Android, Playstation, Xbox и др. Широко използвана от известни фирми за разработка на игри и графични приложения, някои от които Capcom, Activision, Ubisoft, Microsoft Studios, Nintendo и др.  -  Unity – друга широко използвана библиотека, която е основно използвана и популярна в кръговете за създаване на мобилни графични приложения или игри. Пригодена е за лесно  и  бързо  разработване  и  използване,  както  от  професионалисти  така  и  от начинаещи разработчици. Поддържа разработване на двумерни и тримерни графични приложения,  притежава  гъвкава  система  за  моделиране  и  анимация.  Както  своя съперник  Unreal  Engine,  Unity  е  мулти-платформена  библиотека  разработвана  за Windows, Mac, iOS, Android, Playstation, Xbox, Windows Phone, Tizen и др. Някои от най-известните й потребители са Electronic Arts, LEGO, Ubisoft, Square Enix и др.  -  CryEngine – подобно на вече споменатите гиганти в индустрията CryEngine не отстъпва по наличния набор от функционалности, които предлага. Едно от големите предимства на тази библиотека пред своите конкуренти се дължи на това, че нейните разработчици предлагат пълния й изходен код напълно безплатно. Характеризира се също с своята   - 80 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 6.5. мултиплатформеност  за  iOS,  Android,  Windows,  Linux,  Playstation,  Xbox,  and  Wii. Известни компании като Poppermost Productions, CI Games, Obsidian Entertainment  са нейни потребители.  ПРОЕКТИРАНЕ НА ГРАФИЧНА БИБЛИОТЕКА Цел и задачи – целта на настоящата работа е да се разработи графична библиотека с цел обучение на студенти, която може да послужи и за основа на разработване на цялостна библиотека за симулация в реално време. Друга основна цел на разработката е запознаване със съвременни техники за създаване на компютърно генерирани изображения в реално време, оптимизации и др. Тази библиотека трябва да притежава следните основни възможности:  -  Четене на външни файлове съдържащи графични модели или елементи; -  Четене на външни файлове съдържащи графични изображения, текстури, атласи и др.; -  Четене и компилиране и изпълняване на шейдър програми, съдържани във външни файлове. Зареждане на данни в променливи и шейдър програми; -  Набор от различни възможности за визуализиране на изображения и геометрични елементи в реално време; -  Филтрация и обработка на изображения  – изглаждане, осветляване, оразмеряване, подсилване на високи и ниски честоти, регулация на контраста и др.; -  Работа с динамично геометрично ниво на детайл за графични модели -  Поддръжка на основни техники за изобразяване – осветление, текстуриране, сенки, рендиране, изключване на невидими обекти; -  Поддръжка на напреднали техники за изобразяване и симулация на океан, атмосфера, облаци, околна среда и др.; -  Динамично  взаимодействие  в  реално  време  със  виртуалната  сцена  –  селектиране, трансформиране и обработка на обекти; -  Разпознаване  на  сигнали  и  команди  от  набор  периферни  устройства  –  мишка, клавиатура, джойстик, трекбол и др.; -  Сериализация  и  десериализация  на  виртуална  сцена  върху  външен  носител  или постоянна памет.  Проектиране - разработването на графичната библиотека представлява набор от три самостоятелни  библиотеки,  които  са  разработени  и  предназначени  да  работят  заедно  за реализация на основните цели и задачи на проекта. Предвидено е библиотеката да развива собствени  интерфейси  (API)  и  собствен  дизайн  на  модулите,  без  да  се  базира  върху съществуващи библиотеки, доколкото това е възможно. Фигура 1 систематизира структурата на библиотеката и модулите работещи заедно за реализиране на поставената цел. Следва детайлно описание и запознаване с трите основни модула на графичната библиотека.     - 81 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 6.5.   Фиг. 1. Структурна схема на графична библиотека GFX  -  MGL (Math for Graphics) – е библиотека, създадена за работа с математични действия. Тя е една от трите основополагащи библиотеки, която има за цел да даде възможност лесна  за  работа  с  основни  математически  конструкции.  Core  e  основният  модул, съдържащ базовите конструкции като: вектори, матрици, куатърниани, докато модула Struct съдържа голям набор от тримерни примитиви и техните двумерни еквиваленти (сфера, конус, паралелепипед, куб, лъч, равнини, пресечен паралелепипед и др.), както и  структури  за  разделяне  на  пространството  (на  английски  –  spacial  partitioning). Библиотеката поддържа всички често използвани методи за реализация на основни математически  операции  (векторно  и  скаларно  произведение,  трансформация  на матрици,  ротация  и  интерполация  между  вектори  и  куатърниани,  нормализация, транспониране, детерминанта и намиране на обратна матрица и др.), разположени в модул Functions, както и голям набор от методи за проверка на пресичане между основните  геометрични  примитиви,  като  сфера,  паралелепипед,  равнина,  лъч, пресечена пирамида и др., разположени в модул Geometric Test. Важен компонент от тази библиотека са структурите за „ускорение“ на управлението и обработката на геометрични  примитиви.  Библиотеката  поддържа  две  такива  структури  наречени: Осмично дърво (на английски –  octree) и Точково дърво (на английски –  point cloud tree), разположени в модул Space Partition. Осмичното дърво е специален вид дърво, при който всеки родителски възел има осем наследника. Всеки възел представлява куб с размери степени на 2 (4, 8, 16, 32 и т.н) и се дели на 8 идентични куба, които стават негови наследници.  Всеки възел съхранява своите наследници и набор от вписани в него примитиви, този вид структури са често използвани за отстраняване на невидими обекти от динамични сцени. Друг важен модул който предлага MGL е API модула, предоставящ набор от програмни интерфейси.    - 82 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 6.5. -  ECS  (Entity  Component  System)  –  е  втората  основна  библиотека,  предоставяща имплементация  на  архитектурен  шаблон  често  използван  при  разработката  на виртуални игри и графични приложения. Този шаблон е характерен с това, че набляга на използването на композиция пред наследяване, което предоставя голяма гъвкавост. Той се състои от три елемента наречени Обект, Компонент и Система. Компонент в този шаблон представлява проста минимална структура, в която се съхраняват само данни  (пример:  компонент  описващ  позицията  на  един  обект  би  представлявал структура съдържаща само един член - тримерен вектор описващ позицията на обекта в пространството) всеки компонент има уникален идентификатор или номер и описва определена  характеристика  или  действие.  Всеки  Обект  представлява  уникален идентификатор или маска, която се получава на база на това какви компоненти са обвързани с него. В зависимост от това с какви компоненти е обвързан даден обект, той притежава различни свойства, възможности и характеристики. Това, което контролира, управлява и използва Компонентите на един Обект са Системите, те са функции или класове  описващи  набор  от  действия  които  обработват  определени  Компоненти принадлежащи на всеки един от Обектите.   -  GFX (Graphics Effects) – е третия последен и основен елемент, който комбинира предходните два. Той представлява ядрото на графичната библиотека заедно с пълния набор от функционалности нужни за изпълняване на задачата и целта на проекта. Тук са обособени няколко критични модула, нужни за работата на библиотеката. Първият от тях е модулът, съдържащ всички Компоненти описващи и дефиниращи държанието и характера на Обектите. Друг характерен модул е модулът, описващ структурата и начина на представяне на графичните модели, нужен за зареждане и интерпретиране на външни ресурси, съдържащи геометрични форми, елементи или модели (на английски – mesh). В Основния модул се съдържат набора от Системи изпълняващи действията нужни за пълното изпълняване на вече дефинираната цел на проекта. Групата от системи тук се дели в няколко основни категории. Основни (на английски –  Core) - набор от основни системи, които се заемат да решат базови задачи като трансформации, композиране, селектиране, управление на ниво на детайлност, премахване на невидими обекти и др. Друга група са системите отговорни за осветяване и осветление, както и групата от системи, отговорни за генериране на динамични сенки в реално време. Следваща е групата системи за контрол и симулация на частици, вода, океан, облаци и климат – околна среда.  ИЗВОДИ Създаването на графична библиотека с образователна цел е реализируема задача, дори в рамките на няколко месеца от сам човек или група хора. Напълно възможно е и развиването на библиотеката до състояние, което е готова за използване за практически или реални задачи. За  да  има  смисъл  развиването  на  даден  продукт,  отвъд  изследователска  цел,  е необходимо откриване на подходяща ниша, към която продуктът да бъде насочен. На този етап може да се твърди, че нишата за графични системи и библиотеки е успешно заета от наложилите се продукти. Голям набор от тези библиотеки разполагат с огромен брой хора, работещи  над  тях,  постоянно  добавяйки  нови  функционалности,  разширявайки  ги  в разнообразни посоки, включващи не само графичната визуализация. Като бъдеща посока за развитие може да се продължи с изследване и експериментиране с различни концепции и техники за графично визуализиране. Работа с анимации, техники за реалистично текстуриране, динамично теселиране на обекти в реално време и др.    - 83 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 6.5. 