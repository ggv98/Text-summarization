 ВЪВЕДЕНИЕ Повишаването на интереса към криптовалутите, токените и желанието да се търгува с тях във всеки един момент, налага ползване не само на настолни приложения, но и на мобилни. Това променя начина на свързване на приложението към мрежата, а именно чрез отдалечен достъп до възел. ERC20 стандарта унифицира боравенето с токени, което означава, че едно приложение може да се използва за много токени. Приложението служи за управление на блокчейн сметки.  ИЗЛОЖЕНИЕ Свързване на приложението  Фиг. 1. Web3j мрежа (https://github.com/web3j/web3j)                                                   16 Докладът е представен на студентската научна сесия на 27 април 2018 г. в секция „Комуникационна и компютърна техника“ с оригинално заглавие на български език: АНДРОИД МОБИЛНО ПРИЛОЖЕНИЕ ЗА УПРАВЛЕНИЕ НА АКАУНТИ ЗА КРИПТОВАЛУТА СЪС СТАНДАРТ ERC20   - 76 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. Свързване на приложението към възел на мрежата, с използване на Webj библиотеката е показано нагледно на  Фиг.  1. За  Android  устройства, се използва метода  build на класа Web3jFactory,  показан  по-долу.  Стойността  по  подразбиране  на  HttpService  е http://localhost:8545/.    Web3j web3 = Web3jFactory.build(new HttpService());    Създаване на нови сметки Създаването  на  нови  сметки  става  с  няколко  метода,  от  които  разглеждам  само generateBip39Wallet на класа WalletUtils, другите генерират текстов файл, който се пази на устройството. При него се създава мнемонична фраза, която се криптира. С вече криптираната фраза се създава частен ключ за генериране на файл, представляващ ключа. Входни параметри са паролата за частния ключ и мястото на съхранение.    WalletUtils.generateBip39Wallet(password, destinationDirectory);    Зареждане на портфейл Зареждането  на  сметка става с метода  loadBip39Credentials на класа  WalletUtils. За параметри метода приема паролата и мнемоничната фраза.    WalletUtils.loadBip39Credentials(password, mnemonic);   Логиката за задействане на зареждане или създаване е показана на Фиг. 2.  Фиг. 2. Диаграма на процеса на зареждане/създаване на сметка  Стандарт ERC20 Оперирането с договори става с методите, имплементирани в класа. Те са обвивка на JSON-RPC  комуникация  между  клиента  и  възела.  Изключват  нуждата  от  кодиране  и декодиране на обръщанията към функциите с ABI(Abstract Binary Interface). ERC20 стандарта има следните методи и събития:   totalSupply – общ брой предлагани токени;   balanceOf(address  _owner)  const  returns  (uint256  balance)  –  взема  баланса  на подадения адрес;   transfer(address _to, uint256 _value) returns (bool success) – изпраща определения брой токени към избрания адрес;   transferFrom(address _from, address _to, uint256 _value) returns (bool success) – изпраща определения брой токени от единия адрес към другия;   - 77 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.   approve(address _spender, uint256 _value) returns (bool success) – разрешаване на някой да ползва средства от сметка до определена стойност;   allowance(address  *_owner*,  address  *_spender*)  constant  returns  (uint256 remaining)– оставащата стойност, от която може да се тегли;   Transfer(address indexed _from, address indexed _to, uint256 _value) – събитие, което се изпълнява след като токените са изпратени;   Approval(address  indexed  _owner,  address  indexed  _spender,  uint256  _value)  – събитие, което се изпълнява, когато се извика approve.  Операции с токени Добавянето  на  токени  към  портфейла  става  с  подаване  на  адреса  на  токена  и имплементиране на методите му в клас, който унаследява org.web3j.tx.Contract. Пример за функция в класа е разгледан метода balanceOf.  Function function = new Function("balanceOf", Arrays.<Type>asList(_owner),     Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));  Като първи параметър е името на функцията, втори – параметрите, които приема, а третия - връщания тип.  Извикване на функцията става с метода executeCallSingleValueReturnAsync(<име–на–фунцкията>), като този метод се използва само за четене от мрежата. За зареждане на договора се използва метода load(), който прави инстанция на класа ни и подава параметрите на класа Contract.    load("0x<address>|<ensName>",  web3j, credentials, GAS_PRICE, GAS_LIMIT);    ИЗВОДИ  Изграждането на портфейла с помощта на Web3j е сравнително лесно. Трудната част е да се гарантира сигурността на частния ключ, поради това се използва портфейл, на който личния ключ се получава от кодиране на произволни думи - seeds, с SHA256, а семената са получени от кодиране на мнемоничната фраза с паролата. Портфейлът може да се зареди без да се пази частния ключ, благодарение на мнемоничната фраза.  БЛАГОДАРНОСТИ Този доклад се публикува със съдействието на проект 2018-EEA-01 „Методи за събиране, организация,  достъп,  обработка  и  анализ  на  големи  обеми  от  структурирани  и неструктурирани  данни“,  финансиран  от  фонд  „Научни  изследвания“  на  Русенски университет „Ангел Кънчев“.    