 ВЪВЕДЕНИЕ Надеждното кодиране, предаване и съхраняване на данни в наши дни е важен въпрос, с който се занимава теорията на кодиране (MacWilliams, F., & etc., 1977). Цикличните кодове (Cyclic  Redundancy  Check)  намират  широко  приложение  в  практиката  при  предаване  и съхраняване на данни (Mukhtar, H. & etc. 2016).  Цикличният  код  (Cyclic  Redundancy  Code)  е  често  използван  код  при  дигиталните системи поради сравнително лесната си имплементация и високата си ефективност (Koopman, P. & etc., 2015). Той се характеризира с висока точност при откриване на грешки. Намира приложение при кодиране на данни за твърди дискове и DVD устройства; при стандартите за кодиране  на  видео;  някои  от  технологиите  за  предаване  на  данни;  при  системите  за разпространяване на данни и други (Tamo, I., & etc. 2015).  Целта на настоящия доклад е да се представи интерактивен обучителен софтуер, който подпомага  решаването  на  задачи  за  Цикличен  код  в  упражненията  по  дисциплината „Надеждност  и  диагностика  на  компютърни  системи“  на  студентите  в  специалността “Компютърни системи и технологии“ на Русенски университет „Ангел Кънчев“   ЦИКЛИЧЕН КОД Цикличният код е вид систематичен код (Peterson, W. &  etc., 1961), чието основно свойство се състои в това, че всяка комбинация, получена чрез циклично преместване на разрядите в една разрешена комбинация, също е разрешена (Smrikarova, S. & etc. 2013). При  построяване  на  цикличните  кодове  е  възприето  кодовата  комбинация  да  се представя чрез полиноми спрямо някаква променлива, примерно x:   G(x) = a .x  + a .x  + … + a .x  + a ,  (1) n-1 n-1 n-2 n-2 1 1 0                                                  18 Докладът е представен на студентската научна сесия на 27.04.2018 г. в секция „Комуникационна и компютърна техника“ с оригинално заглавие на български език: ИНТЕРАКТИВЕН СОФТУЕР ЗА ИЗУЧАВАНЕ НА АЛГОРИТЪМА ЗА КОДИРАНЕ НА ДАННИ В ЦИКЛИЧЕН КОД.   - 85 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4. където a , a , …, a , a  са коефициенти, приемащи стойности нула или единица n-1 n-2 1 0(Smrikarova, S. & etc. 2013).  Например комбинацията 10101101 може да се ще се запише под формата на полином    G(x) = x7 + x5 + x3 + x2+ 1,  (2) където G(x) е полином описващ кодовата комбинация, съдържаща n елемента (8 бита в конкретния пример). Полиномът на закодираната комбинация се определя по следния начин:    F(x) = Q(x).P(x) = xk.G(x)+R(x) ,  (3) където:   P(x) – пораждащ полином със степен k – броят на контролните разряди; Q(x) – частно; R(x) – остатък от делението на xk.G(x) на P(x), (Smrikarova, S. & etc. 2013). Пораждащият полином P(x) се избира от таблица с неприводими полиноми, представена на Фиг. 1. Пораждащият полином P(x) трябва да е прост, неприводим, т.е. да се дели без остатък само на единица и на себе си, (Smrikarova, S. & etc. 2013). За откриване на двойна грешка, пораждащият полином трябва да е от степен k – броя на контролните разряди.  За откриване на тройна грешка, пораждащият полином P(x) трябва да има вида:    P(x) = (1+x).P1(x),  (4) където полиномът P1(x) се избира от таблицата на Фиг. 1 така, че показателят му l да изпълнява условието l ≥ n (Smrikarova, S. & etc. 2013).   Фиг. 1. Таблица с неприводими полиноми ФУНКЦИОНАЛНИ ВЪЗМОЖНОСТИ НА ИНТЕРАКТИВНИЯ СОФТУЕР Интерактивният обучителен софтуер е проектиран с два модула: за преподаватели и студенти. На Фиг. 2 е представена диаграмата на дейности на студента.    - 86 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Фиг. 2. Диаграма на дейности на студент  На Фиг. 3 е представена диаграмата на дейности на преподавател.   - 87 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Фиг. 3. Диаграма на дейности на преподавател Модулът  за  преподаватели  предоставя  възможност  за  въвеждане  на  входната последователност, която може да се манипулира и изтрива както чрез клавиатурата, така и чрез бутоните в приложението. В модула за студент входната последователност се генерира на случаен принцип от предварително зададени примери в софтуера.  Модулът  за  студенти  е  проектиран  с  хибриден  българско-английски  интерфейс  за обучение както на български, така и на чуждестранни студенти (Фиг. 4). На всеки етап от решаването на задачите, софтуерът очаква от студентът да въвежда коректните резултати за да се продължи към следващата итерация. Предоставена е възможност за избор на два типа грешка – двойна и тройна грешка, което е свързано и със съответни разлики в начините на избор на пораждащия полином и кодирането на входната последнователност.     - 88 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Фиг. 4. Интерфейс на модула за студенти  В модула за студенти се отчита времето на работа и допуснатите грешки за всяка от итерациите (Фиг. 5). За да се акцентира на важни моменти в алгоритъма е предвидена и подходяща по-ярка цветова гама при извеждането на важна информацията в заданието, както и в самите итерации при визуализирането на резултатите.     Фиг. 5. Пример за решена задача в модула за студенти Архитектурата на приложението е представена на Фиг. 6.   - 89 - PROCEEDINGS OF UNIVERSITY OF RUSE - 2018, volume 57, book 3.4.  Фиг. 6. Архитектура на приложението ИЗВОДИ  Описаният интерактивен обучителен софтуер ще подпомогне студентите в процеса на изучаване и решаване на задачи с Цикличен код. Постъпковият подход на решаване на задачите и отчитането на грешки, с възможност за подсказване на верния отговор, ще даде възможност на студентите да проследяват и проверяват знанията си на всяка итерация от изучавания алгоритъм за кодиране на данни в Цикличен код. Описаното решение предоставя един съвременен интерактивен образователен инструмент за самоконтрол и самоподготовка на студентите с неограничен брой примери за решаване.   Модулът за преподаватели значително ще намали допълнителното технологично време за проверка и пререшаване на курсовите задачи за Цикличен код. Той ще се използва от преподавателите като прецизен и съвременен технологичен еталон за сравнение и бързо откриване на грешки и неточности в контролните работи или рефератите на студентите. В упражненията за Цикличен код се кодират входни последователности с ограничена разрядност.  За  кодирането  на  по-дълги  последователности  са  необходими  много  повече итерации и технологично време, с което не се разполага. Предложеният програмен агоритъм за кодиране на данни в Цикличен код може да кодира входни последователност с големи разрядности.  Това  ще  предостави  възможност  на  преподавателите  и  студентите  да експериментират в упражненията с по-големи по размер входни последователности.  ACKNOWLEDGMENTS Този  доклад  се  публикува  със  съдействието  на  проект  2018-EEA-01  „Методи  за събиране, организация, достъп, обработка и анализ на големи обеми от структурирани и неструктурирани  данни“,  финансиран  от  фонд  „Научни  изследвания“  на  Русенски университет „Ангел Кънчев“.  